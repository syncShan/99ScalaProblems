
val a = new simpleBunch()
val y = List(1, 1, 2, 3, 5, 8)
val z = List(1,2,3,2,1)
a.last(y)
a.lastRecursive(y)
a.penultimate(y)
a.nth(2, y)
a.length(y)
a.reverse(y)
a.reverse2(y)
a.isPalindrome(y)
a.isPalindrome(z)
y.isInstanceOf[List[Int]]
val b= List(1,2,3)++List(4,5)
a.flatten(List(List(1, 1), 2, List(3, List(5, 8))))
val t = List('a, 'a, 'a, 'a, 'b, 'c, 'c, 'a, 'a, 'd, 'e, 'e, 'e, 'e)
a.compress(t)
a.pack(t)
a.encode(t)
a.encodeModified(t)
val x1  = 'a
a.decode(List((4, 'a), (1, 'b), (2, 'c), (2, 'a), (1, 'd), (4, 'e)))
val a2 = new simpleBunchTwo()
a2.duplicate(z)
a2.duplicateN(3, List('a, 'b, 'c, 'c, 'd))
a2.drop(3, List('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k))
a2.slice(3, 7, List('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k))
a2.rotate(3, List('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k))
a2.rotate(-2, List('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k))
a2.removeAt(1, List('a, 'b, 'c, 'd))
a2.insertAt('new, 1, List('a, 'b, 'c, 'd))
a2.range(3,6)
a2.range(3,3)